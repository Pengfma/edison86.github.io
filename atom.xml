<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Edison的部落格</title>
  <subtitle>Edison的部落格</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://edison86.github.io/"/>
  <updated>2016-09-13T02:06:38.537Z</updated>
  <id>http://edison86.github.io/</id>
  
  <author>
    <name>Edison</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jQuery编码标准&amp;最佳实践(外文翻译)</title>
    <link href="http://edison86.github.io/2016/09/13/jQuery%E7%BC%96%E7%A0%81%E6%A0%87%E5%87%86&amp;%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://edison86.github.io/2016/09/13/jQuery编码标准&amp;最佳实践/</id>
    <published>2016-09-13T02:05:03.630Z</published>
    <updated>2016-09-13T02:06:38.537Z</updated>
    
    <content type="html"><![CDATA[<h6 id="今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：-http-lab-abhinayrathore-com-jquery-standards-全文翻译如下："><a href="#今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：-http-lab-abhinayrathore-com-jquery-standards-全文翻译如下：" class="headerlink" title="今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：[http://lab.abhinayrathore.com/jquery-standards/ ] 全文翻译如下："></a>今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：[<a href="http://lab.abhinayrathore.com/jquery-standards/" target="_blank" rel="external">http://lab.abhinayrathore.com/jquery-standards/</a> ] 全文翻译如下：</h6><p>用jQuery编写代码，有一些通用的标准和最佳的实践。这些标准没有全面的覆盖JavaScript标准或者最佳的实践。如果你有一些问题、意见或者改善方面，请在我的博客上留言。浏览这个jQuery参考目录的清单。</p>
<h2 id="加载jQuery"><a href="#加载jQuery" class="headerlink" title="加载jQuery"></a>加载jQuery</h2><ol>
<li><p>尽量使用CDN将jQuery引入你的页面。</p>
<p> <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script><br> <script>window.jQuery || document.write(‘<script src="js/jquery-2.1.4.min.js" type="text/javascript">&lt;\/script&gt;’)</script><br> 点击这里查看一份流行的jQuery CDN清单[<a href="http://lab.abhinayrathore.com/jquery-cheatsheet/]。" target="_blank" rel="external">http://lab.abhinayrathore.com/jquery-cheatsheet/]。</a> </p>
</li>
<li><p>如上所示，在你本地托管库建立一个备用的相同版本。</p>
</li>
<li>如上所示，使用协议无关的URL（忽略http:或者https:）。</li>
<li>如果可能的话，将你的所有的JavaScript和jQuery文件放置在页面的底部引入。</li>
<li><p>应该使用哪个版本？</p>
<ul>
<li>如果你要兼容IE6/7/8就不要使用jQuery版本2.x</li>
<li>对于新的web-app，如果你没有一些插件兼容问题，强烈建议使用最新的jQuery版本</li>
<li>当从CND上加载jQuery时，总是要指定你将要加载的完整的版本号（例如：1.11.0，而不是1.11或者仅仅是1）</li>
<li>不要加载多变的jQuery版本</li>
<li>不要用jQuery CDN上的jquery-latest.js</li>
</ul>
</li>
<li><p>如果你正在使用例如Prototype, MooTools, Zepto等也是用$符号的其他库，尽量不要使用$,而是使用jQuery代替。你可以用$.noConflict()将$符号的控制权返回给其他库。</p>
</li>
<li>对于高级的浏览器功能检测，使用 Modernizr</li>
</ol>
<h2 id="jQuery变量"><a href="#jQuery变量" class="headerlink" title="jQuery变量"></a>jQuery变量</h2><ol>
<li>所有用来存储或缓存的jQuery对象都应该有一个带有$前缀的名字。</li>
<li><p>总是记得缓存你的jQuery选择器返回的对象变量以便重用。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $myDiv = $(<span class="string">"#myDiv"</span>);</div><div class="line">$myDiv.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>使用驼峰命名规则来命名变量</p>
</li>
</ol>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol>
<li>无论何时尽可能使用ID选择器，因为用document.getElementById()来处理他们，所以更快。（个人观点：应该在恰当的时机使用，因为使用ID选择器不利于CSS样式的复用）</li>
<li><p>当使用类选择器时，不要在你的选择器里使用元素类型。示例：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $products = $(<span class="string">"div.products"</span>); <span class="comment">// 慢</span></div><div class="line"><span class="keyword">var</span> $products = $(<span class="string">".products"</span>); <span class="comment">// 快</span></div></pre></td></tr></table></figure>
</li>
<li><p>对于子嵌套选择器，使用find方法。.find()方法更快，因为第一个选择是不通过Sizzle选择器引擎去处理的。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不好,通过Sizzle选择器引擎去处理的</span></div><div class="line"><span class="keyword">var</span> $productIds = $(<span class="string">"#products div.id"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 好,#products已经通过document.getElementById()选择了，所以只有div.id需要通过通过Sizzle选择器引擎去处理</span></div><div class="line"><span class="keyword">var</span> $productIds = $(<span class="string">"#products"</span>).find(<span class="string">"div.id"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>具体的在你的选择器的右边，不具体的在你的选择器的边。例如：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不是最佳的</span></div><div class="line">$(<span class="string">"div.data .gonzalez"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 最佳的</span></div><div class="line">$(<span class="string">".data td.gonzalez"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>避免过度的特性</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".data table.attendees td.gonzalez"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 更好：尽可能丢掉中间的</span></div><div class="line">$(<span class="string">".data td.gonzalez"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>给你的选择器一个上下文环境</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 比较慢，因为它不得不从整个DOM里找.class</span></div><div class="line">$(<span class="string">'.class'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 更快，因为现在它仅仅从class-container下面找</span></div><div class="line">$(<span class="string">'.class'</span>, <span class="string">'#class-container'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>避免全局选择器</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不好</span></div><div class="line">$(<span class="string">'div.container &gt; *'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 更好</span></div><div class="line">$(<span class="string">'div.container'</span>).children();</div></pre></td></tr></table></figure>
</li>
<li><p>避免隐含通用选择器。当你离开了这个选择器，全局选择器（*）仍然隐含着。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不好</span></div><div class="line">$(<span class="string">'div.someclass :radio'</span>); <span class="comment">// 不好</span></div><div class="line"></div><div class="line"><span class="comment">// 更好</span></div><div class="line">$(<span class="string">'div.someclass input:radio'</span>); <span class="comment">// 好</span></div></pre></td></tr></table></figure>
</li>
<li><p>当选择一个ID时，不要使用多层的ID或者嵌套。单个ID选择是通过document.getElementById() 处理的，因此不要将他们与其他的选择器混用。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#outer #inner'</span>); <span class="comment">// 不好</span></div><div class="line">$(<span class="string">'div#inner'</span>); <span class="comment">// 不好</span></div><div class="line">$(<span class="string">'.outer-container #inner'</span>); <span class="comment">// 不好</span></div><div class="line">$(<span class="string">'#inner'</span>); <span class="comment">// 好</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><ol>
<li><p>操作之前要分离已经存在的元素，操作完后将它放回去。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $myList = $(<span class="string">"#list-container &gt; ul"</span>).detach();</div><div class="line"><span class="comment">//...$myList上一些操作</span></div><div class="line">$myList.appendTo(<span class="string">"#list-container"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>用字符串连接或者array.join()代替.append()。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不好</span></div><div class="line"><span class="keyword">var</span> $myList = $(<span class="string">"#list"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">    $myList.append(<span class="string">"&lt;li&gt;"</span>+i+<span class="string">"&lt;/li&gt;"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 好</span></div><div class="line"><span class="keyword">var</span> $myList = $(<span class="string">"#list"</span>);</div><div class="line"><span class="keyword">var</span> list = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">    list += <span class="string">"&lt;li&gt;"</span>+i+<span class="string">"&lt;/li&gt;"</span>;</div><div class="line">&#125;</div><div class="line">$myList.html(list);</div><div class="line"> </div><div class="line"><span class="comment">//更快</span></div><div class="line"><span class="keyword">var</span> array = []; </div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">    array[i] = <span class="string">"&lt;li&gt;"</span>+i+<span class="string">"&lt;/li&gt;"</span>; </div><div class="line">&#125;</div><div class="line">$myList.html(array.join(<span class="string">''</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>不要作用在不存在的元素上</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不好: 当选择器上没有元素时，它运行在3个函数上</span></div><div class="line">$(<span class="string">"#nosuchthing"</span>).slideUp();</div><div class="line"> </div><div class="line"><span class="comment">// 好</span></div><div class="line"><span class="keyword">var</span> $mySelection = $(<span class="string">"#nosuchthing"</span>);</div><div class="line"><span class="keyword">if</span> ($mySelection.length) &#123;</div><div class="line">    $mySelection.slideUp();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol>
<li>每页只用一个Document Ready handler，这更易于debug以及追踪<br>行为流动。</li>
<li><p>不要使用匿名函数添加事件。匿名函数不易于debug，维护，测试或者重用。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;); <span class="comment">// BAD</span></div><div class="line"></div><div class="line"><span class="comment">// GOOD</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myLinkClickHandler</span>(<span class="params"></span>)</span>&#123;...&#125;</div><div class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">"click"</span>, myLinkClickHandler);</div></pre></td></tr></table></figure>
</li>
<li><p>Document ready事件处理不应该是一个匿名函数。一旦用了，匿名函数不易于debug，维护，测试或者重用。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; ... &#125;); <span class="comment">// 不好: </span></div><div class="line"> </div><div class="line"><span class="comment">// 好</span></div><div class="line">$(initPage); <span class="comment">// 或者 $(document).ready(initPage);</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initPage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 页面加载事件，你可以在这里初始化初始值或者调用其他的初始工具</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Document ready事件处理应包括来自外部的文件并且内联JavaScript可以用来调用任何初始化设置后的ready处理程序。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"my-document-ready.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">	<span class="comment">// 一些全局变量的设置</span></div><div class="line">	$(<span class="built_in">document</span>).ready(initPage); <span class="comment">// or $(initPage);</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>不要在HTML中使用（JavaScript的内联）行为标记，这些是调试的噩梦。始终使用jQuery绑定事件保持一致性，从而更容易添加和动态删除事件。</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a id="myLink" href="#" onclick="myEventHandler();"&gt;my link&lt;/a&gt; &lt;!-- BAD --&gt;</div><div class="line">$("#myLink").on("click", myEventHandler); // GOOD</div></pre></td></tr></table></figure>
</li>
<li><p>如果可能的话，使用事件自定义命名空间。它更容易解除不会影响绑定到其他的绑定在DOM元素上的事件。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">"click.mySpecialClick"</span>, myEventHandler); <span class="comment">// 好</span></div><div class="line"><span class="comment">// 然后，它更容易解除</span></div><div class="line">$(<span class="string">"#myLink"</span>).unbind(<span class="string">"click.mySpecialClick"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>当你不得不给多个元素添加某个事件时，使用事件委托。事件委托允许我们向一个父元素添加一个单个的事件监听器，它将对匹配一个选择器的所有的后代元素起作用，不管那些后代元素是现在已经存在的还是以后添加的。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#list a"</span>).on(<span class="string">"click"</span>, myClickHandler); <span class="comment">// 不好,</span></div><div class="line"></div><div class="line">$(<span class="string">"#list"</span>).on(<span class="string">"click"</span>, <span class="string">"a"</span>, myClickHandler); <span class="comment">// 好,</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><ol>
<li>避免使用 .getJson() 或者 .get()，只需使用$.ajax() 因为那是被内部调用的。</li>
<li>不要使用https网站的http请求。选择少架构的URL（将协议HTTP / HTTPS分离你的URL）</li>
<li><p>不要将请求参数放进URL，使用数据对象环境发送他们。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不易阅读</span></div><div class="line">$.ajax(&#123;</div><div class="line">    url: <span class="string">"something.php?param1=test1&amp;param2=test2"</span>,</div><div class="line">    ....</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="comment">// 易读</span></div><div class="line">$.ajax(&#123;</div><div class="line">    url: <span class="string">"something.php"</span>,</div><div class="line">    data: &#123; param1: test1, param2: test2 &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>尽量指定数据类型环境，这更容易知道你正在操作什么类型的数据。</p>
</li>
<li><p>使用事件委托为用Ajax加载的内容添加事件。事件委托有优势，即他们能够处理后代元素上后来添加到文档的事件。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#parent-container"</span>).on(<span class="string">"click"</span>, <span class="string">"a"</span>, delegatedClickHandlerForAjax);</div></pre></td></tr></table></figure>
</li>
<li><p>使用Promise接口</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123; ... &#125;).then(successHandler, failureHandler);</div><div class="line"> </div><div class="line"><span class="comment">// OR</span></div><div class="line"><span class="keyword">var</span> jqxhr = $.ajax(&#123; ... &#125;);</div><div class="line">jqxhr.done(successHandler);</div><div class="line">jqxhr.fail(failureHandler);</div></pre></td></tr></table></figure>
</li>
<li><p>尝试Ajax模板</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jqxhr = $.ajax(&#123;</div><div class="line">    url: url,</div><div class="line">    type: <span class="string">"GET"</span>, <span class="comment">// 默认值，你可以根据需要设置</span></div><div class="line">    cache: <span class="literal">true</span>, <span class="comment">// 默认值是true，但是对'script' 和 'jsonp'默认值是false， 因此根据需要设置</span></div><div class="line">    data: &#123;&#125;, <span class="comment">// 添加你的请求参数</span></div><div class="line">    dataType: <span class="string">"json"</span>, <span class="comment">// 参考类型</span></div><div class="line">    jsonp: <span class="string">"callback"</span>, <span class="comment">// 仅指定这个去匹配你API期待的JSONP请求的的回调参数</span></div><div class="line">    statusCode: &#123; <span class="comment">//如果要处理特定的错误代码，使用状态代码映射设置</span></div><div class="line">        <span class="number">404</span>: handler404,</div><div class="line">        <span class="number">500</span>: handler500</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">jqxhr.done(successHandler);</div><div class="line">jqxhr.fail(failureHandler);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="特效与动画"><a href="#特效与动画" class="headerlink" title="特效与动画"></a>特效与动画</h2><ol>
<li>采取受限制的并且一致的方法去实现动画功能</li>
<li>不要过度的使用动画，除非使用UX请求驱动。<ul>
<li>尽量使用简单的show/hide，toggle和slideUp/slideDown功能去切换元素</li>
<li>尽量使用预先设置的动画过渡时间”slow”, “fast” 或者400</li>
</ul>
</li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol>
<li>总是选择有良好的支持、文档、测试及社区支持的插件</li>
<li>使用与你正在使用的jQuery版本兼容的插件</li>
<li>任何通用的重复使用的组件都应该作为一个jQuery 插件实现。</li>
</ol>
<h2 id="链"><a href="#链" class="headerlink" title="链"></a>链</h2><ol>
<li><p>对变量缓存和多个选择器调用使用链作为一个替代选择</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myDiv"</span>).addClass(<span class="string">"error"</span>).show();</div></pre></td></tr></table></figure>
</li>
<li><p>每当链超过3链路或因事件分配变得复杂，使用适当的换行和缩进，使代码易读。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myLink"</span>)</div><div class="line">    .addClass(<span class="string">"bold"</span>)</div><div class="line">    .on(<span class="string">"click"</span>, myClickHandler)</div><div class="line">    .on(<span class="string">"mouseover"</span>, myMouseOverHandler)</div><div class="line">    .show();</div></pre></td></tr></table></figure>
</li>
<li><p>对于长链，在一个变量里缓存中间对象是可以接受的。</p>
</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>对于参数使用对象字段。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$myLink.attr(<span class="string">"href"</span>, <span class="string">"#"</span>).attr(<span class="string">"title"</span>, <span class="string">"my link"</span>).attr(<span class="string">"rel"</span>, <span class="string">"external"</span>); <span class="comment">// BAD, 3 calls to attr()</span></div><div class="line"><span class="comment">// GOOD, only 1 call to attr()</span></div><div class="line">$myLink.attr(&#123;</div><div class="line">    href: <span class="string">"#"</span>,</div><div class="line">    title: <span class="string">"my link"</span>,</div><div class="line">    rel: <span class="string">"external"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>不要将CSS和jQuery混合。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#mydiv"</span>).css(&#123;<span class="string">'color'</span>:red, <span class="string">'font-weight'</span>:<span class="string">'bold'</span>&#125;); <span class="comment">// BAD</span></div><div class="line">.error &#123; color: red; font-weight: bold; &#125; <span class="comment">/* GOOD */</span></div><div class="line">$(<span class="string">"#mydiv"</span>).addClass(<span class="string">"error"</span>); <span class="comment">// GOOD</span></div></pre></td></tr></table></figure>
</li>
<li><p>切勿使用已过时的方法。始终对每个新版本弃用方法的保持关注，尽量避免使用它们。</p>
</li>
<li><p>需要时，将本地JavaScript与jQuery结合使用。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myId"</span>); <span class="comment">// is still little slower than...</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myId"</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li>jQuery示例[ <a href="http://learn.jquery.com/performance/" target="_blank" rel="external">http://learn.jquery.com/performance/</a> ]</li>
<li>jQuery学习[ <a href="http://learn.jquery.com" target="_blank" rel="external">http://learn.jquery.com</a> ]</li>
<li>jQuery API文档[ <a href="http://api.jquery.com/" target="_blank" rel="external">http://api.jquery.com/</a>]</li>
<li>jQuery编码规范与最佳实践[ <a href="http://www.jameswiseman.com/blog/2010/04/20/jquery-standards-and-best-practice/" target="_blank" rel="external">http://www.jameswiseman.com/blog/2010/04/20/jquery-standards-and-best-practice/</a> ]</li>
<li>jQuery备忘单[<a href="http://lab.abhinayrathore.com/jquery-cheatsheet/" target="_blank" rel="external">http://lab.abhinayrathore.com/jquery-cheatsheet/</a>]</li>
<li>jQuery插件引用[ <a href="http://stefangabos.ro/jquery/jquery-plugin-boilerplate-revisited/" target="_blank" rel="external">http://stefangabos.ro/jquery/jquery-plugin-boilerplate-revisited/</a> ]</li>
</ul>
<h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>对于任何建议，疑问或感谢，请在我的博客文章评论：[<a href="http://web3o.blogspot.com/2014/03/jquery-coding-standards-and-best.html" target="_blank" rel="external">http://web3o.blogspot.com/2014/03/jquery-coding-standards-and-best.html</a> ]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：-http-lab-abhinayrathore-com-jquery-standards-全文翻译如下：&quot;&gt;&lt;a href=&quot;#今天在网上看到一篇英文文
    
    </summary>
    
      <category term="jQuery" scheme="http://edison86.github.io/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://edison86.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery编码标准&amp;最佳实践(外文翻译)</title>
    <link href="http://edison86.github.io/2016/09/13/jQuery%E7%BC%96%E7%A0%81%E6%A0%87%E5%87%86&amp;%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5(%E5%A4%96%E6%96%87%E7%BF%BB%E8%AF%91)/"/>
    <id>http://edison86.github.io/2016/09/13/jQuery编码标准&amp;最佳实践(外文翻译)/</id>
    <published>2016-09-13T02:02:14.638Z</published>
    <updated>2016-09-13T02:00:40.638Z</updated>
    
    <content type="html"><![CDATA[<h6 id="今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：-http-lab-abhinayrathore-com-jquery-standards-全文翻译如下："><a href="#今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：-http-lab-abhinayrathore-com-jquery-standards-全文翻译如下：" class="headerlink" title="今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：[http://lab.abhinayrathore.com/jquery-standards/ ] 全文翻译如下："></a>今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：[<a href="http://lab.abhinayrathore.com/jquery-standards/" target="_blank" rel="external">http://lab.abhinayrathore.com/jquery-standards/</a> ] 全文翻译如下：</h6><p>用jQuery编写代码，有一些通用的标准和最佳的实践。这些标准没有全面的覆盖JavaScript标准或者最佳的实践。如果你有一些问题、意见或者改善方面，请在我的博客上留言。浏览这个jQuery参考目录的清单。</p>
<h2 id="加载jQuery"><a href="#加载jQuery" class="headerlink" title="加载jQuery"></a>加载jQuery</h2><ol>
<li><p>尽量使用CDN将jQuery引入你的页面。</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml">window.jQuery || document.write('<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-2.1.4.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">\</span>/<span class="attr">script</span>&gt;</span>')</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	``` </div><div class="line"></div><div class="line">	点击这里查看一份流行的jQuery CDN清单[http://lab.abhinayrathore.com/jquery-cheatsheet/]。 </div><div class="line"></div><div class="line">2. 如上所示，在你本地托管库建立一个备用的相同版本。</div><div class="line">3. 如上所示，使用协议无关的URL（忽略http:或者https:）。</div><div class="line">4. 如果可能的话，将你的所有的JavaScript和jQuery文件放置在页面的底部引入。</div><div class="line">5. 应该使用哪个版本？</div><div class="line"></div><div class="line"> * 如果你要兼容IE6/7/8就不要使用jQuery版本2.x</div><div class="line"> * 对于新的web-app，如果你没有一些插件兼容问题，强烈建议使用最新的jQuery版本</div><div class="line"> * 当从CND上加载jQuery时，总是要指定你将要加载的完整的版本号（例如：1.11.0，而不是1.11或者仅仅是1）</div><div class="line"> * 不要加载多变的jQuery版本</div><div class="line"> * 不要用jQuery CDN上的jquery-latest.js</div><div class="line"></div><div class="line">6. 如果你正在使用例如Prototype, MooTools, Zepto等也是用$符号的其他库，尽量不要使用$,而是使用jQuery代替。你可以用$.noConflict()将$符号的控制权返回给其他库。</div><div class="line">7. 对于高级的浏览器功能检测，使用 Modernizr</div><div class="line"></div><div class="line">## jQuery变量</div><div class="line">1. 所有用来存储或缓存的jQuery对象都应该有一个带有$前缀的名字。</div><div class="line">2. 总是记得缓存你的jQuery选择器返回的对象变量以便重用。</div><div class="line"></div><div class="line">	```js</div><div class="line">	var $myDiv = $("#myDiv");</div><div class="line">	$myDiv.click(function()&#123;...&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>使用驼峰命名规则来命名变量</p>
</li>
</ol>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol>
<li>无论何时尽可能使用ID选择器，因为用document.getElementById()来处理他们，所以更快。（个人观点：应该在恰当的时机使用，因为使用ID选择器不利于CSS样式的复用）</li>
<li><p>当使用类选择器时，不要在你的选择器里使用元素类型。示例：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $products = $(<span class="string">"div.products"</span>); <span class="comment">// 慢</span></div><div class="line"><span class="keyword">var</span> $products = $(<span class="string">".products"</span>); <span class="comment">// 快</span></div></pre></td></tr></table></figure>
</li>
<li><p>对于子嵌套选择器，使用find方法。.find()方法更快，因为第一个选择是不通过Sizzle选择器引擎去处理的。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不好,通过Sizzle选择器引擎去处理的</span></div><div class="line"><span class="keyword">var</span> $productIds = $(<span class="string">"#products div.id"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 好,#products已经通过document.getElementById()选择了，所以只有div.id需要通过通过Sizzle选择器引擎去处理</span></div><div class="line"><span class="keyword">var</span> $productIds = $(<span class="string">"#products"</span>).find(<span class="string">"div.id"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>具体的在你的选择器的右边，不具体的在你的选择器的边。例如：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不是最佳的</span></div><div class="line">$(<span class="string">"div.data .gonzalez"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 最佳的</span></div><div class="line">$(<span class="string">".data td.gonzalez"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>避免过度的特性</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".data table.attendees td.gonzalez"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 更好：尽可能丢掉中间的</span></div><div class="line">$(<span class="string">".data td.gonzalez"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>给你的选择器一个上下文环境</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 比较慢，因为它不得不从整个DOM里找.class</span></div><div class="line">$(<span class="string">'.class'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 更快，因为现在它仅仅从class-container下面找</span></div><div class="line">$(<span class="string">'.class'</span>, <span class="string">'#class-container'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>避免全局选择器</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不好</span></div><div class="line">$(<span class="string">'div.container &gt; *'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 更好</span></div><div class="line">$(<span class="string">'div.container'</span>).children();</div></pre></td></tr></table></figure>
</li>
<li><p>避免隐含通用选择器。当你离开了这个选择器，全局选择器（*）仍然隐含着。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不好</span></div><div class="line">$(<span class="string">'div.someclass :radio'</span>); <span class="comment">// 不好</span></div><div class="line"></div><div class="line"><span class="comment">// 更好</span></div><div class="line">$(<span class="string">'div.someclass input:radio'</span>); <span class="comment">// 好</span></div></pre></td></tr></table></figure>
</li>
<li><p>当选择一个ID时，不要使用多层的ID或者嵌套。单个ID选择是通过document.getElementById() 处理的，因此不要将他们与其他的选择器混用。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#outer #inner'</span>); <span class="comment">// 不好</span></div><div class="line">$(<span class="string">'div#inner'</span>); <span class="comment">// 不好</span></div><div class="line">$(<span class="string">'.outer-container #inner'</span>); <span class="comment">// 不好</span></div><div class="line">$(<span class="string">'#inner'</span>); <span class="comment">// 好</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><ol>
<li><p>操作之前要分离已经存在的元素，操作完后将它放回去。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $myList = $(<span class="string">"#list-container &gt; ul"</span>).detach();</div><div class="line"><span class="comment">//...$myList上一些操作</span></div><div class="line">$myList.appendTo(<span class="string">"#list-container"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>用字符串连接或者array.join()代替.append()。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不好</span></div><div class="line"><span class="keyword">var</span> $myList = $(<span class="string">"#list"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">    $myList.append(<span class="string">"&lt;li&gt;"</span>+i+<span class="string">"&lt;/li&gt;"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 好</span></div><div class="line"><span class="keyword">var</span> $myList = $(<span class="string">"#list"</span>);</div><div class="line"><span class="keyword">var</span> list = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">    list += <span class="string">"&lt;li&gt;"</span>+i+<span class="string">"&lt;/li&gt;"</span>;</div><div class="line">&#125;</div><div class="line">$myList.html(list);</div><div class="line"> </div><div class="line"><span class="comment">//更快</span></div><div class="line"><span class="keyword">var</span> array = []; </div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">    array[i] = <span class="string">"&lt;li&gt;"</span>+i+<span class="string">"&lt;/li&gt;"</span>; </div><div class="line">&#125;</div><div class="line">$myList.html(array.join(<span class="string">''</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>不要作用在不存在的元素上</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不好: 当选择器上没有元素时，它运行在3个函数上</span></div><div class="line">$(<span class="string">"#nosuchthing"</span>).slideUp();</div><div class="line"> </div><div class="line"><span class="comment">// 好</span></div><div class="line"><span class="keyword">var</span> $mySelection = $(<span class="string">"#nosuchthing"</span>);</div><div class="line"><span class="keyword">if</span> ($mySelection.length) &#123;</div><div class="line">    $mySelection.slideUp();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol>
<li>每页只用一个Document Ready handler，这更易于debug以及追踪<br>行为流动。</li>
<li><p>不要使用匿名函数添加事件。匿名函数不易于debug，维护，测试或者重用。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;); <span class="comment">// BAD</span></div><div class="line"></div><div class="line"><span class="comment">// GOOD</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myLinkClickHandler</span>(<span class="params"></span>)</span>&#123;...&#125;</div><div class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">"click"</span>, myLinkClickHandler);</div></pre></td></tr></table></figure>
</li>
<li><p>Document ready事件处理不应该是一个匿名函数。一旦用了，匿名函数不易于debug，维护，测试或者重用。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; ... &#125;); <span class="comment">// 不好: </span></div><div class="line"> </div><div class="line"><span class="comment">// 好</span></div><div class="line">$(initPage); <span class="comment">// 或者 $(document).ready(initPage);</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initPage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 页面加载事件，你可以在这里初始化初始值或者调用其他的初始工具</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Document ready事件处理应包括来自外部的文件并且内联JavaScript可以用来调用任何初始化设置后的ready处理程序。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"my-document-ready.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">	<span class="comment">// 一些全局变量的设置</span></div><div class="line">	$(<span class="built_in">document</span>).ready(initPage); <span class="comment">// or $(initPage);</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>不要在HTML中使用（JavaScript的内联）行为标记，这些是调试的噩梦。始终使用jQuery绑定事件保持一致性，从而更容易添加和动态删除事件。</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a id="myLink" href="#" onclick="myEventHandler();"&gt;my link&lt;/a&gt; &lt;!-- BAD --&gt;</div><div class="line">$("#myLink").on("click", myEventHandler); // GOOD</div></pre></td></tr></table></figure>
</li>
<li><p>如果可能的话，使用事件自定义命名空间。它更容易解除不会影响绑定到其他的绑定在DOM元素上的事件。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">"click.mySpecialClick"</span>, myEventHandler); <span class="comment">// 好</span></div><div class="line"><span class="comment">// 然后，它更容易解除</span></div><div class="line">$(<span class="string">"#myLink"</span>).unbind(<span class="string">"click.mySpecialClick"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>当你不得不给多个元素添加某个事件时，使用事件委托。事件委托允许我们向一个父元素添加一个单个的事件监听器，它将对匹配一个选择器的所有的后代元素起作用，不管那些后代元素是现在已经存在的还是以后添加的。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#list a"</span>).on(<span class="string">"click"</span>, myClickHandler); <span class="comment">// 不好,</span></div><div class="line"></div><div class="line">$(<span class="string">"#list"</span>).on(<span class="string">"click"</span>, <span class="string">"a"</span>, myClickHandler); <span class="comment">// 好,</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><ol>
<li>避免使用 .getJson() 或者 .get()，只需使用$.ajax() 因为那是被内部调用的。</li>
<li>不要使用https网站的http请求。选择少架构的URL（将协议HTTP / HTTPS分离你的URL）</li>
<li><p>不要将请求参数放进URL，使用数据对象环境发送他们。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不易阅读</span></div><div class="line">$.ajax(&#123;</div><div class="line">    url: <span class="string">"something.php?param1=test1&amp;param2=test2"</span>,</div><div class="line">    ....</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="comment">// 易读</span></div><div class="line">$.ajax(&#123;</div><div class="line">    url: <span class="string">"something.php"</span>,</div><div class="line">    data: &#123; param1: test1, param2: test2 &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>尽量指定数据类型环境，这更容易知道你正在操作什么类型的数据。</p>
</li>
<li><p>使用事件委托为用Ajax加载的内容添加事件。事件委托有优势，即他们能够处理后代元素上后来添加到文档的事件。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#parent-container"</span>).on(<span class="string">"click"</span>, <span class="string">"a"</span>, delegatedClickHandlerForAjax);</div></pre></td></tr></table></figure>
</li>
<li><p>使用Promise接口</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123; ... &#125;).then(successHandler, failureHandler);</div><div class="line"> </div><div class="line"><span class="comment">// OR</span></div><div class="line"><span class="keyword">var</span> jqxhr = $.ajax(&#123; ... &#125;);</div><div class="line">jqxhr.done(successHandler);</div><div class="line">jqxhr.fail(failureHandler);</div></pre></td></tr></table></figure>
</li>
<li><p>尝试Ajax模板</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jqxhr = $.ajax(&#123;</div><div class="line">    url: url,</div><div class="line">    type: <span class="string">"GET"</span>, <span class="comment">// 默认值，你可以根据需要设置</span></div><div class="line">    cache: <span class="literal">true</span>, <span class="comment">// 默认值是true，但是对'script' 和 'jsonp'默认值是false， 因此根据需要设置</span></div><div class="line">    data: &#123;&#125;, <span class="comment">// 添加你的请求参数</span></div><div class="line">    dataType: <span class="string">"json"</span>, <span class="comment">// 参考类型</span></div><div class="line">    jsonp: <span class="string">"callback"</span>, <span class="comment">// 仅指定这个去匹配你API期待的JSONP请求的的回调参数</span></div><div class="line">    statusCode: &#123; <span class="comment">//如果要处理特定的错误代码，使用状态代码映射设置</span></div><div class="line">        <span class="number">404</span>: handler404,</div><div class="line">        <span class="number">500</span>: handler500</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">jqxhr.done(successHandler);</div><div class="line">jqxhr.fail(failureHandler);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="特效与动画"><a href="#特效与动画" class="headerlink" title="特效与动画"></a>特效与动画</h2><ol>
<li>采取受限制的并且一致的方法去实现动画功能</li>
<li>不要过度的使用动画，除非使用UX请求驱动。<ul>
<li>尽量使用简单的show/hide，toggle和slideUp/slideDown功能去切换元素</li>
<li>尽量使用预先设置的动画过渡时间”slow”, “fast” 或者400</li>
</ul>
</li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol>
<li>总是选择有良好的支持、文档、测试及社区支持的插件</li>
<li>使用与你正在使用的jQuery版本兼容的插件</li>
<li>任何通用的重复使用的组件都应该作为一个jQuery 插件实现。</li>
</ol>
<h2 id="链"><a href="#链" class="headerlink" title="链"></a>链</h2><ol>
<li><p>对变量缓存和多个选择器调用使用链作为一个替代选择</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myDiv"</span>).addClass(<span class="string">"error"</span>).show();</div></pre></td></tr></table></figure>
</li>
<li><p>每当链超过3链路或因事件分配变得复杂，使用适当的换行和缩进，使代码易读。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myLink"</span>)</div><div class="line">    .addClass(<span class="string">"bold"</span>)</div><div class="line">    .on(<span class="string">"click"</span>, myClickHandler)</div><div class="line">    .on(<span class="string">"mouseover"</span>, myMouseOverHandler)</div><div class="line">    .show();</div></pre></td></tr></table></figure>
</li>
<li><p>对于长链，在一个变量里缓存中间对象是可以接受的。</p>
</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>对于参数使用对象字段。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$myLink.attr(<span class="string">"href"</span>, <span class="string">"#"</span>).attr(<span class="string">"title"</span>, <span class="string">"my link"</span>).attr(<span class="string">"rel"</span>, <span class="string">"external"</span>); <span class="comment">// BAD, 3 calls to attr()</span></div><div class="line"><span class="comment">// GOOD, only 1 call to attr()</span></div><div class="line">$myLink.attr(&#123;</div><div class="line">    href: <span class="string">"#"</span>,</div><div class="line">    title: <span class="string">"my link"</span>,</div><div class="line">    rel: <span class="string">"external"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>不要将CSS和jQuery混合。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#mydiv"</span>).css(&#123;<span class="string">'color'</span>:red, <span class="string">'font-weight'</span>:<span class="string">'bold'</span>&#125;); <span class="comment">// BAD</span></div><div class="line">.error &#123; color: red; font-weight: bold; &#125; <span class="comment">/* GOOD */</span></div><div class="line">$(<span class="string">"#mydiv"</span>).addClass(<span class="string">"error"</span>); <span class="comment">// GOOD</span></div></pre></td></tr></table></figure>
</li>
<li><p>切勿使用已过时的方法。始终对每个新版本弃用方法的保持关注，尽量避免使用它们。</p>
</li>
<li><p>需要时，将本地JavaScript与jQuery结合使用。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#myId"</span>); <span class="comment">// is still little slower than...</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myId"</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li>jQuery示例[ <a href="http://learn.jquery.com/performance/" target="_blank" rel="external">http://learn.jquery.com/performance/</a> ]</li>
<li>jQuery学习[ <a href="http://learn.jquery.com" target="_blank" rel="external">http://learn.jquery.com</a> ]</li>
<li>jQuery API文档[ <a href="http://api.jquery.com/" target="_blank" rel="external">http://api.jquery.com/</a>]</li>
<li>jQuery编码规范与最佳实践[ <a href="http://www.jameswiseman.com/blog/2010/04/20/jquery-standards-and-best-practice/" target="_blank" rel="external">http://www.jameswiseman.com/blog/2010/04/20/jquery-standards-and-best-practice/</a> ]</li>
<li>jQuery备忘单[<a href="http://lab.abhinayrathore.com/jquery-cheatsheet/" target="_blank" rel="external">http://lab.abhinayrathore.com/jquery-cheatsheet/</a>]</li>
<li>jQuery插件引用[ <a href="http://stefangabos.ro/jquery/jquery-plugin-boilerplate-revisited/" target="_blank" rel="external">http://stefangabos.ro/jquery/jquery-plugin-boilerplate-revisited/</a> ]</li>
</ul>
<h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>对于任何建议，疑问或感谢，请在我的博客文章评论：[<a href="http://web3o.blogspot.com/2014/03/jquery-coding-standards-and-best.html" target="_blank" rel="external">http://web3o.blogspot.com/2014/03/jquery-coding-standards-and-best.html</a> ]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;今天在网上看到一篇英文文献，觉得有许多值得参考的地方，于是翻译出来并对一些观点发表一下我个人的看法。原文地址：-http-lab-abhinayrathore-com-jquery-standards-全文翻译如下：&quot;&gt;&lt;a href=&quot;#今天在网上看到一篇英文文
    
    </summary>
    
      <category term="jQuery" scheme="http://edison86.github.io/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://edison86.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>CSS3兄弟选择器实现导航条分隔线</title>
    <link href="http://edison86.github.io/2016/08/26/%E5%AF%BC%E8%88%AA%E6%9D%A1%E5%88%86%E9%9A%94%E7%BA%BF/"/>
    <id>http://edison86.github.io/2016/08/26/导航条分隔线/</id>
    <published>2016-08-26T15:17:53.992Z</published>
    <updated>2016-08-26T15:21:39.313Z</updated>
    
    <content type="html"><![CDATA[<p>页面布局中，经常会看到一排元素用一条竖线分隔，如导航条的分隔线。下图为天猫商城首页的导航条效果:<br><img src="http://i.imgur.com/sJCXfmP.png" alt=""></p>
<h3 id="天猫商城实现原理"><a href="#天猫商城实现原理" class="headerlink" title="天猫商城实现原理"></a>天猫商城实现原理</h3><p>查看天猫商城首页的导航条源代码如下：也就是让每一个li都有一个左边框，然后通过设置margin-left: -13px;让ul溢出后隐藏第一个li的左边框。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">     <span class="attribute">height</span>: <span class="number">18px</span>;</div><div class="line">     <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">     <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">     <span class="attribute">margin-left</span>: -<span class="number">13px</span>;</div><div class="line">     <span class="attribute">overflow</span>: hidden;</div><div class="line">     <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.1</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="CSS3兄弟选择器实现原理"><a href="#CSS3兄弟选择器实现原理" class="headerlink" title="CSS3兄弟选择器实现原理"></a>CSS3兄弟选择器实现原理</h3><p>让第一个li后面的li都加一个左边框。代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">18px</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#148CCA</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.1</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>  <span class="number">12px</span> ;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>+<span class="selector-tag">li</span>&#123;  </div><div class="line">   <span class="attribute">border-left</span>: <span class="number">1px</span> solid ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;页面布局中，经常会看到一排元素用一条竖线分隔，如导航条的分隔线。下图为天猫商城首页的导航条效果:&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/sJCXfmP.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;天猫商城实现原理&quot;&gt;&lt;a href=&quot;#天猫商
    
    </summary>
    
      <category term="CSS" scheme="http://edison86.github.io/categories/CSS/"/>
    
    
      <category term="选择器" scheme="http://edison86.github.io/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>水平排列li元素之间的空白去除</title>
    <link href="http://edison86.github.io/2016/08/26/%E6%B0%B4%E5%B9%B3%E6%8E%92%E5%88%97li%E5%85%83%E7%B4%A0%E4%B9%8B%E9%97%B4%E7%9A%84%E7%A9%BA%E7%99%BD%E5%8E%BB%E9%99%A4/"/>
    <id>http://edison86.github.io/2016/08/26/水平排列li元素之间的空白去除/</id>
    <published>2016-08-26T12:27:56.934Z</published>
    <updated>2016-08-29T02:54:58.421Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>页面布局中，有时候我们需要将li元素水平排列，如导航条的水平排列。当设置li元素display：inline-block时，两个li元素之间会有一个空隙。如下所示:<br>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li1"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li2"</span>&gt;</span>男装<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li3"</span>&gt;</span>女装<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span>&#123; <span class="attribute">margin</span>: <span class="number">0</span>;  <span class="attribute">display</span>: inline-block;  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>; &#125;</div><div class="line"><span class="selector-id">#li1</span>&#123; <span class="attribute">background-color</span>: <span class="number">#7740ff</span>; &#125;</div><div class="line"><span class="selector-id">#li2</span>&#123; <span class="attribute">background-color</span>: <span class="number">#ff2177</span>; &#125;</div><div class="line"><span class="selector-id">#li3</span>&#123; <span class="attribute">background-color</span>: <span class="number">#47ff3e</span>; &#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/Hk0CEyB.png" alt=""></p>
<h3 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h3><p>浏览器有一个默认行为，会把inline元素之间的空白字符渲染成一个空格。<br>上面代码中的 li 标签在换行后会产生换行字符，浏览器会将其渲染成一个空格。</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>方法一：既然空格是由于 li 换行产生的，那就可以将 li 代码写在一排。但是如果太多的 li 代码写在一行的话，代码就不够直观。如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li1"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li2"</span>&gt;</span>男装<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li3"</span>&gt;</span>女装<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li3"</span>&gt;</span>男鞋<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li3"</span>&gt;</span>女鞋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>方法二： 先给ul设置font-size:0 以便消除空格，再给li重新设置font-size。<br>方法三： 可以将li标签不闭合，浏览器在解析的过程中会自动补全。但是违背了标签闭合的Web标准。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li1"</span>&gt;</span>首页</div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li2"</span>&gt;</span>男装</div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li3"</span>&gt;</span>女装</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>方法四： 在li标签之间加一个换行显示的注释。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li1"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!--</span></div><div class="line">--&gt;<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li2"</span>&gt;</span>男装<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!--</span></div><div class="line">--&gt;<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li3"</span>&gt;</span>女装<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>方法五： 让前一个li的尾部闭合标签和后一个li的头部标签在一行排列。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li1"</span>&gt;</span>首页</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li2"</span>&gt;</span>男装</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li3"</span>&gt;</span>女装<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;页面布局中，有时候我们需要将li元素水平排列，如导航条的水平排列。当设置li元素display：inline-blo
    
    </summary>
    
      <category term="HTML" scheme="http://edison86.github.io/categories/HTML/"/>
    
    
      <category term="li" scheme="http://edison86.github.io/tags/li/"/>
    
  </entry>
  
  <entry>
    <title>绝对定位元素水平垂直居中</title>
    <link href="http://edison86.github.io/2016/08/25/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <id>http://edison86.github.io/2016/08/25/绝对定位元素水平垂直居中/</id>
    <published>2016-08-25T12:17:05.531Z</published>
    <updated>2016-08-25T13:47:04.007Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法1（兼容IE8-）："><a href="#方法1（兼容IE8-）：" class="headerlink" title="方法1（兼容IE8+）："></a>方法1（兼容IE8+）：</h3><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#child</span>&#123;		    </div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">margin</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="扩展：（绝对定位元素内的文字水平垂直居中）"><a href="#扩展：（绝对定位元素内的文字水平垂直居中）" class="headerlink" title="扩展：（绝对定位元素内的文字水平垂直居中）"></a>扩展：（绝对定位元素内的文字水平垂直居中）</h3><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>文字水平垂直居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#148CCA</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#child</span>&#123;		    </div><div class="line">    <span class="attribute">width</span>: <span class="number">80px</span>; <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">margin</span>: auto;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ed58ff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="如下图所示："><a href="#如下图所示：" class="headerlink" title="如下图所示："></a>如下图所示：</h6><p><img src="http://i.imgur.com/FpV5zNp.png" alt=""></p>
<h3 id="方法2（兼容IE9-）："><a href="#方法2（兼容IE9-）：" class="headerlink" title="方法2（兼容IE9+）："></a>方法2（兼容IE9+）：</h3><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span>&#123;</div><div class="line">          <span class="attribute">width</span>: <span class="number">500px</span>;  <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">          <span class="attribute">position</span>: relative;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-id">#child</span>&#123;</div><div class="line">          <span class="attribute">width</span>: <span class="number">100px</span>;  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">          <span class="attribute">position</span>: absolute;  <span class="attribute">top</span>: <span class="number">50%</span>;  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">          <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">          <span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">          <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">          <span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法1（兼容IE8-）：&quot;&gt;&lt;a href=&quot;#方法1（兼容IE8-）：&quot; class=&quot;headerlink&quot; title=&quot;方法1（兼容IE8+）：&quot;&gt;&lt;/a&gt;方法1（兼容IE8+）：&lt;/h3&gt;&lt;p&gt;html&lt;br&gt;&lt;figure class=&quot;highlig
    
    </summary>
    
      <category term="CSS" scheme="http://edison86.github.io/categories/CSS/"/>
    
    
      <category term="居中" scheme="http://edison86.github.io/tags/%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>JS数组去重</title>
    <link href="http://edison86.github.io/2016/08/21/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>http://edison86.github.io/2016/08/21/js数组去重/</id>
    <published>2016-08-21T11:47:44.605Z</published>
    <updated>2016-08-22T07:26:12.151Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习es6，学到了一个简单高效又没有bug的js去重方法，现在整理一下几种数组去重的方法，并对这几种方法做一个比较。</p>
<h3 id="方法1（效率不高）："><a href="#方法1（效率不高）：" class="headerlink" title="方法1（效率不高）："></a>方法1（效率不高）：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> res = []; <span class="comment">//创建一个新的临时数组</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len=<span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="comment">//如果临时数组有当前项，则跳过；没有则添加到临时数组。</span></div><div class="line">        <span class="keyword">if</span> (res.indexOf(<span class="keyword">this</span>[i]) == <span class="number">-1</span>)&#123;</div><div class="line">            res.push(<span class="keyword">this</span>[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>,<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,<span class="string">'b'</span>, <span class="string">'e'</span>, <span class="number">2</span>, <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.unique1())</div></pre></td></tr></table></figure>
<h3 id="方法2（有局限性）："><a href="#方法2（有局限性）：" class="headerlink" title="方法2（有局限性）："></a>方法2（有局限性）：</h3><p>注：由于得到的数组是排序后的数组，所以有一定的局限性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sort(); <span class="comment">// 将数组排序</span></div><div class="line">    <span class="keyword">var</span> res = [<span class="keyword">this</span>[<span class="number">0</span>]]; <span class="comment">//创建一个新的临时数组</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len=<span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>[i]!==res[res.length<span class="number">-1</span>])&#123;</div><div class="line">            res.push(<span class="keyword">this</span>[i])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>,<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,<span class="string">'b'</span>, <span class="string">'e'</span>, <span class="number">2</span>, <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.unique2())</div></pre></td></tr></table></figure></p>
<h3 id="方法3（有bug）："><a href="#方法3（有bug）：" class="headerlink" title="方法3（有bug）："></a>方法3（有bug）：</h3><p>注：会将字符’1’强制类型转换为数字1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> res = []; <span class="comment">//创建一个空的临时数组</span></div><div class="line">    <span class="keyword">var</span> json = &#123;&#125;; <span class="comment">//创建一个空对象</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len=<span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="comment">//将数组元素与对象中的属性对比，</span></div><div class="line">        <span class="comment">//如果对象中有此属性，则跳过；如果没有此属性，将此元素添加到临时数组中，</span></div><div class="line">        <span class="comment">//同时将此元素作为对象的一个属性，并赋值为1，添加到对象中。</span></div><div class="line">        <span class="keyword">if</span> (!json[<span class="keyword">this</span>[i]])&#123;</div><div class="line">            res.push(<span class="keyword">this</span>[i]);</div><div class="line">		    json[<span class="keyword">this</span>[i]]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>,<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,<span class="string">'b'</span>, <span class="string">'e'</span>, <span class="number">2</span>, <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.unique3())</div></pre></td></tr></table></figure></p>
<h3 id="方法4（推荐）："><a href="#方法4（推荐）：" class="headerlink" title="方法4（推荐）："></a>方法4（推荐）：</h3><p>注：利用es6中的set数据结构和Array.from()方法，简单高效没有bug！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique4 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(set);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>,<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,<span class="string">'b'</span>, <span class="string">'e'</span>, <span class="number">2</span>, <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.unique4())</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习es6，学到了一个简单高效又没有bug的js去重方法，现在整理一下几种数组去重的方法，并对这几种方法做一个比较。&lt;/p&gt;
&lt;h3 id=&quot;方法1（效率不高）：&quot;&gt;&lt;a href=&quot;#方法1（效率不高）：&quot; class=&quot;headerlink&quot; title=&quot;方法1（
    
    </summary>
    
      <category term="JS" scheme="http://edison86.github.io/categories/JS/"/>
    
    
      <category term="数组" scheme="http://edison86.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
